var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const net = require("net");
const phin = require("phin")
    .defaults({ parse: "json", timeout: 12000 });
const Game = require("./class/game").default;
const postServer = require("./api/postServer");
const { packetHandler } = require("./net/packetHandler");
const SERVER = net.createServer(socketConnection);
function maskIP(ip) {
    ip = ip.split(".").splice(0, 2);
    return ip.join(".") + ".x.x";
}
function getHostIP() {
    return __awaiter(this, void 0, void 0, function* () {
        const req = yield phin({ url: "https://api.ipify.org/?format=json" });
        return req.body.ip;
    });
}
function isLocalIP(ip) {
    if (ip.startsWith("192.168."))
        return true;
    if (ip.startsWith("172.16."))
        return true;
    if (ip.startsWith("10."))
        return true;
    return false;
}
function socketConnection(client) {
    return __awaiter(this, void 0, void 0, function* () {
        client.IPV4 = client.remoteAddress;
        if (isLocalIP(client.IPV4))
            client.IPV4 = yield getHostIP();
        client.IP = maskIP(client.IPV4);
        console.log(`<New client: ${client.IP}>`);
        client.setNoDelay(true);
        client.setKeepAlive(true, 10000);
        client.on("data", (PACKET) => {
            packetHandler(client, PACKET)
                .catch(console.error);
        });
        client.once("close", () => __awaiter(this, void 0, void 0, function* () {
            console.log(`<Client: ${client.IP}> Lost connection.`);
            if (client.player) {
                yield Game._playerLeft(client.player)
                    .catch(console.error);
            }
            if (!client.destroyed)
                client.destroy();
        }));
        client.on("error", () => {
            if (!client.destroyed)
                client.destroy();
        });
        setTimeout(() => {
            if (!client.player)
                client.destroy();
        }, 20000);
    });
}
let SERVER_LISTEN_ADDRESS = "0.0.0.0";
if (Game.local) {
    SERVER_LISTEN_ADDRESS = "127.0.0.1";
    Game.port = 42480;
}
SERVER.listen(Game.port, SERVER_LISTEN_ADDRESS, () => {
    console.log(`Listening on port: ${Game.port}.`);
    if (!Game.local)
        postServer().then(() => {
            console.log(`Posted to: https://www.brick-hill.com/play/${Game.gameId} successfully.`);
            setInterval(postServer, 60000);
        });
    else
        console.log("Running server locally.");
});
process.on("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
    if (Game.playerCount > 0) {
        console.log("Shutting down server, please wait...");
        let promises = [];
        for (let player of Game.players) {
            if (!player.socket.destroyed) {
                promises.push(new Promise((resolve) => {
                    player.socket.end(null, null, resolve);
                }));
            }
        }
        yield Promise.all(promises);
    }
    return process.exit(0);
}));
