function readUIntv(buffer) {
    const ret = {};
    if (buffer[0] & 1) {
        ret.end = 1;
        ret.data = buffer[0] >> 1;
    }
    else if (buffer[0] & 2) {
        ret.end = 2;
        ret.data = (buffer.readUInt16LE(0) >> 2) + 0x80;
    }
    else if (buffer[0] & 4) {
        ret.end = 3;
        ret.data = (buffer[2] << 13) + (buffer[1] << 5) + (buffer[0] >> 3) + 0x4080;
    }
    else {
        ret.end = 4;
        ret.data = (buffer.readUInt32LE(0) / 8) + 0x204080;
    }
    return ret;
}
function writeUIntv(buffer, offset) {
    const length = buffer.length;
    if (length < 0x80) {
        const size = Buffer.alloc(1);
        size.writeUInt8((length << 1) + 1, offset || 0);
        return Buffer.concat([size, buffer]);
    }
    else if (length < 0x4080) {
        const size = Buffer.alloc(2);
        size.writeUInt16LE(((length - 0x80) << 2) + 2, offset || 0);
        return Buffer.concat([size, buffer]);
    }
    else if (length < 0x204080) {
        const size = Buffer.alloc(3);
        const writeValue = ((length - 0x4080) << 3) + 4;
        size.writeUInt8((writeValue & 0xFF), offset || 0);
        size.writeUInt16LE(writeValue >> 8, offset + 1 || 1);
        return Buffer.concat([size, buffer]);
    }
    else {
        const size = Buffer.alloc(4);
        size.writeUInt32LE((length - 0x204080) * 8, offset || 0);
        return Buffer.concat([size, buffer]);
    }
}
module.exports = { readUIntv, writeUIntv };
