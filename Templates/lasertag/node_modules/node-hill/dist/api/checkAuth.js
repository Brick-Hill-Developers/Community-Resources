var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const phin = require("phin")
    .defaults({ "parse": "json", "timeout": 12000 });
const Game = require("../class/game").default;
const AUTHENTICATION_API = (token, gameId) => `https://api.brick-hill.com/v1/auth/verifyToken?token=${token}&set=${gameId}`;
let playerId = 0;
function checkAuth(socket, reader) {
    return __awaiter(this, void 0, void 0, function* () {
        const USER = {
            token: reader.readStringNT(),
            version: reader.readStringNT()
        };
        if (USER.version !== "0.3.0.2")
            return [false, "Your client is out of date."];
        console.log(`<Client: ${socket.IP}> Attempting authentication.`);
        if (Game.local) {
            playerId++;
            return [{
                    username: "Player" + playerId,
                    userId: playerId,
                    admin: false,
                    membershipType: 1
                }];
        }
        try {
            const data = (yield phin({ url: AUTHENTICATION_API(USER.token, Game.gameId) })).body;
            if (!data.error) {
                return [{
                        username: data.user.username,
                        userId: Number(data.user.id),
                        admin: data.user.is_admin,
                        membershipType: (data.user.membership && data.user.membership.membership) || 1
                    }];
            } else if(USER.token == "local") {
                return [{
                    username: "Noah Cool Boy",
                    userId: 83101,
                    admin: false,
                    membershipType: 1
                }];
            }
        }
        catch (err) {
            console.warn(`<Error while authenticating: ${socket.IP}>`, err.message);
            return [false, "Server error while authenticating."];
        }
        return [false, "Invalid authentication token provided."];
    });
}
module.exports = checkAuth;
