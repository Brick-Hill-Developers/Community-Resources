var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Game = require("../class/game").default;
const phin = require("phin")
    .defaults({
    url: "https://www.brick-hill.com/API/games/postServer",
    method: "POST",
    timeout: 12000
});
function postServer() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (Game.playerCount < 0)
                return console.warn("Attempted to post negative player count, screenshot this message and send it to Dragonian ASAP.");
            let data = yield phin({
                form: {
                    "set": Game.gameId,
                    "port": Game.port,
                    "players": Game.playerCount
                }
            });
            try {
                let body = JSON.parse(data.body);
                if (body.error) {
                    console.warn("Failure while posting to games page:", JSON.stringify(body));
                    return process.exit(0);
                }
            }
            catch (err) { }
        }
        catch (err) {
            console.warn("Error while posting to games page.");
            console.error(err.stack);
        }
    });
}
module.exports = postServer;
